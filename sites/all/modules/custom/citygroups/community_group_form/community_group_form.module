<?php

/**
 * Implementatation of hook_menu().
 */
function community_group_form_menu() {
  $items['add/community-group'] = array(
    'title' => 'Add Community Group',
    'description' => 'Add a community group.',
    'page callback' => 'community_group_form_form_render',
    'page arguments' => array(t('Add Community Group')),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  $items['add/community-group/geocode'] = array(
    'title' => 'Add Community Group',
    'description' => 'Add a community group.',
    'page callback' => 'community_group_form_geocode',
    'page arguments' => array(t('Add Community Group')),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  return $items;
}

/**
 * Alter the community group form (a content type.)
 */
function community_group_form_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'community_group_node_form' && empty($_GET['section'])) {
    // @TODO fix those modules to have better permission control.
    // @TODO Integrate email verification.

    // Override form elements, by section.
    // Customize prefix.
    community_group_form_prefix_elements(&$form, &$form_values);

    // Customize prepare.
    community_group_form_prepare_elements(&$form, &$form_values);

    // Customize privacy.
    community_group_form_privacy_elements(&$form, &$form_values);

    // Customize contact.
    community_group_form_contact_elements(&$form, &$form_values);

    // Customize contact.
    community_group_form_email_elements(&$form, &$form_values);
    
    // Customize details.
    community_group_form_contact_elements(&$form, &$form_values);
    
    // Customize categories.
    community_group_form_categories_elements(&$form, &$form_values);

    // Customize map.
    community_group_form_map_elements(&$form, &$form_values);
    
    // Customize Location.
    community_group_form_location_elements(&$form, &$form_values);

    // Hide content type settings except for admins.
    $access = user_access('administer nodes');
    if(!$access) {
      $form['additional_settings']['#access'] = FALSE;
    }

    // Add a special submit handler.
    $form['#submit'][] = 'community_group_form_form_submit';
  }
}

function community_group_form_prefix_elements(&$form, &$form_values) {
  $form['#prefix'] .= '<div class="instructions grid_10 alpha omega">';
  $form['#prefix'] .= '<h2>' .t("Add a Community Group") . '</h2>';
  $form['#prefix'] .= t("Contribute information about a community group.");
/*   $form['#prefix'] .= '<p>' .t("UPDATE: We've just upgraded and are demonstrating some new features this week. 8/28/2011.") . '</p>'; */
  $form['#prefix'] .= '</div><div class="clear"></div>';
}

function community_group_form_prepare_elements(&$form, &$form_values) {
  $form['#groups']['group_prepare']->label = t('Start');
  $form['field_prepare']['und']['#description'] = '<p>' . t('Thanks for taking the time to contribute a community group.') . '</p>
    <p>' . t('Contributing a group is easy. You can share basic contact information, categories & map the group. Your group will be listed in the public directory.') 
    . '</p><p>' . t('To <a href="/user/login">edit</a> your group, you will want to <a href="/user/register">Register</a> & <a href="/user/login">Login</a>') . '</p>';
  $form['field_prepare']['und']['#title'] = t("OK, I'm ready.");
}

function community_group_form_privacy_elements(&$form, &$form_values) {
  $form['#groups']['group_privacy']->label = t('Privacy');
  $form['field_privacy']['und']['#description'] = '<p>' . t('The information you contribute will be publicly visible on the web.
  You should only contribute information that is meant to be fully public.') . '</p>' .
  '<p>' . t('9/21/2011 - E-mail addresses will be hidden until the e-mail verification system is built.') . '</p>';
  $form['field_privacy']['und']['#title'] = t("I understand. Let's add a group!");
}

function community_group_form_contact_elements(&$form, &$form_values) {
  $form['title']['#prefix'] = '<div class="fieldset-description">' . ('Contact') . '</div>';

  $form['title']['#suffix'] = '<div class="description"><div class="prompt">(Required)</div>' . t('What is the official name of this community group?') . '</div>';
  
  $form['field_contact']['und'][0]['value']['#title'] = t("Contact Information");
  $form['field_contact']['und'][0]['value']['#type'] = 'textarea';
  $form['field_contact']['und'][0]['value']['#description'] = '
    <div class="explanation"><div class="prompt">(Optional)</div>If your group meets in the street, you can describe the best way to find each other. (Remember, this will be visible on the Internet.)</div>
    <div class="instruction">Enter the contact information for this group.</div>
    <div class="example">Join our Yahoo group to find us.</div>
    ';
}

function community_group_form_email_elements(&$form, &$form_values) {
  $form['field_email']['und']['#description'] = '<div class="prompt">(Recommended)</div>  
  Provide an email address (if appropriate) for the best way to join the group by email.';
  
  // Email verification notice.
  $form['field_email']['und'][0]['#suffix'] = '<div class="verify">COMING SOON: VERIFY THIS EMAIL ADDRESS</div>';
}

function community_group_form_details_elements(&$form, &$form_values) {
dpm(  $form['field_url_calendar']);
  $form['field_url_calendar']['und'][0]['#title'] = t("Calendar URL");
  $form['field_url_calendar']['und'][0]['#description'] = '
    <div class="explanation"><div class="prompt">(Optional)</div>If you have a link to an event calendar, you may add it.</div>
    <div class="instruction">Enter the URL that points to the Calendar.</div>
    <div class="example">http://yahoogroups.com/calendar/8700-block-watch</div>
    ';
}

function community_group_form_categories_elements(&$form, &$form_values) {
  $form['field_audience_size']['und']['#title'] = "Members";
  unset($form['field_audience_size']['und']['#options']['107']);    
  unset($form['field_audience_size']['und']['#options']['627']);
  unset($form['field_audience_size']['und']['#options']['126']);
  unset($form['field_audience_size']['und']['#options']['133']);
}

function community_group_form_map_elements(&$form, &$form_values) {
  if(!empty($add_variables_array['map_instructions'])) {
    $form['#groups']['group_geographic']->label = $add_variables_array['map_instructions'];
  }
    // Custom map interface text.
    $form['field_location']['#prefix'] = '<div id="field-location-add-more-wrapper">';
    $form['field_location']['#prefix'] .= '<div class="map-instructions-container">';
    $form['field_location']['#prefix'] .= '<h3>Map this Group</h3>';
    $form['field_location']['#prefix'] .= '<div class="address-ajax">';
    $form['field_location']['#prefix'] .= '<div id="search-links">';
    $form['field_location']['#prefix'] .= '<div id="search-places" class="form-input">';
    $form['field_location']['#prefix'] .= '<input placeholder="First, ZOOM to address or zipcode" size=50 class="form-item" id="search-map-input" />';
    // @TODO Add graphic in two places. : drupal_get_path('module', 'community_group_form') .
    $form['field_location']['#prefix'] .= '<input type="image" src="' . base_path() . drupal_get_path('module', 'community_group_form') . '/images/search_button_large.png" id="search-links-submit" class="search_btn" align="middle" value="Search" alt="Search">';
    $form['field_location']['#prefix'] .= '</div>';
    $form['field_location']['#prefix'] .= '<h4>Then set a point or draw the area of the map.</h4>';
    $form['field_location']['#prefix'] .= '</div><div class="clear"></div>';   
    $form['field_location']['#prefix'] .= '</div>';

/*
      <h3>You can Draw Shapes on the Map</h3>    
      <h4>Step 1</h4>
      <p>Zoom in to your block.</p>
      <p>Enter your address or intersection. Include your city name.</p>
      <p>Example: 8400 Genesee Ave. Seattle</p>
*/


    // Add Google API (uses openlayers API key)
    // @TODO require openlayers.
    drupal_add_js(
        'http://maps.google.com/maps/api/js?sensor=false&key=' . 
        variable_get('openlayers_layers_google_api', 
          variable_get('googlemap_api_key', '')
        ), 'external');

    drupal_add_js(drupal_get_path('module', 'community_group_form') . '/js/community_group_form.js', array('type' => 'file',  'group' => JS_THEME, 'scope' =>'footer'));
}

function community_group_form_location_elements(&$form, &$form_values) {       
    // Hide Citywide Taxonomy term
    // Load the tid for the Citywide taxonomy term in the Neighborhood vocabulary.
    $citywide_term = taxonomy_get_term_by_name('Citywide');
    foreach(array_values($citywide_term) as $key => $value) {
      if($value->vocabulary_machine_name === 'neighborhood') {
        // Completely replace the value for neighborhood with Citywide if the box is checked.
        // Unset the Citywide term.
        unset($form['field_neighborhood']['und']['#options'][$value->tid]);
        break;
      }
    }

    // Add a Citywide checkbox.
    $form['field_neighborhood_city_wide'] = $form['field_neighborhood'];
    $form['field_neighborhood_city_wide'] = array(
      '#type' => 'checkbox',
      '#title' => 'This Group is <strong>Citywide</strong>',
/*       '#weight' => ($form['field_neighborhood']['#weight'] - 1), */
      '#weight' => -100,
/*
      '#ajax' => array(
        'wrapper' => 'citywide-checkbox',
        'callback' => 'community_group_form_form_citywide_callback',
        'effect' => 'fade',
      ),   
*/   
    );
    
/*
    $form['field_neighborhood_select'] = array(
      '#title' => t("Neighborhoods"),
      '#prefix' => '<div id="citywide-checkbox">',
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#description' => t('Neighborhood or Citywide.'),
    );
*/

    // Since checkboxes return TRUE or FALSE, we have to check that
    // $form_state has been filled as well as what it contains.
/*
    if (empty($form_state['values']['field_neighborhood_city_wide'])) {
      $form['citywide-checkbox']['citywide_other'] = array(
        '#type' => 'checkbox',
        '#weight' => ($form['field_neighborhood']['#weight'] - 1),
        '#title' => t('CityWide Other'),
      );
    }
*/
    
    // Place citywide checkbox in the correct group.
    $form['#group_children']['field_neighborhood_city_wide'] = 'group_geographic';
//    $form['#group_children']['citywide-checkbox'] = 'group_geographic';

    // Load some default settings from CityGroups configuration settings.
    $form['field_city']['und']['#default_value'] = variable_get('citygroups_default_city', '');
    $form['field_state']['und']['#default_value'] = variable_get('citygroups_default_state', '');
    $form['field_state']['und']['#default_value'] = variable_get('citygroups_default_county', '');
}


function community_group_form_form_citywide_callback(&$form, &$form_values) {
  
  //@NOTE This doesn't do anything really yet...just testing.
  
  // Since checkboxes return TRUE or FALSE, we have to check that
  // $form_state has been filled as well as what it contains.
  if (empty($form_state['values']['field_neighborhood_city_wide'])) {

    $form['citywide-checkbox'] = array(
      '#markup' => 'mhasdfkhasdkhjf asd fashkjafsdkhafsdk ',
      '#title' => t('CityWide Other'),
    );

    $form['field_neighborhood']['#attributes']['class'][] = array('neighborhood-hidden');
  }

  return $form['citywide-checkbox'];
}

function community_group_form_form_submit(&$form, &$form_values) {
  if($form_values['values']['field_neighborhood_city_wide']) {
    // Load the tid for the Citywide taxonomy term in the Neighborhood vocabulary.
    $citywide_term = taxonomy_get_term_by_name('Citywide');
    foreach(array_values($citywide_term) as $key => $value) {
      if($value->vocabulary_machine_name === 'neighborhood') {
        // Completely replace the value for neighborhood with Citywide if the box is checked.
        $form_values['values']['field_neighborhood']['und'] = array(array('tid' => $value->tid));
        
        // Also set geocode data.
        
        break;
      }
    }
  }
}

/**
 * On node presave, set the author of the feed item.
 */
function community_group_form_node_presave(&$node) {

    // If reimporting nodes, look for UUID
    if($node->feeds_item->id == 'community_group_feed_csv_reimport') {
/*
      dpm("reimport");
      dpm($node->field_import_uuid['und'][0]['value']);
      dpm($node);
      if($node->field_import_uuid['und'][0]['value'] != $node->uuid) {
        dpm("break");
        return;
      }
*/

//      $node->uuid;
    }


  if (!empty($node->feeds_item)) {
    $feed_node = node_load($node->feeds_item->feed_nid);
    $node->uid = $feed_node->uid;    
    // If citygroups_nid is set and if the guid matches the node UUID, allow the node to be saved.
    // Otherwise, do not save the node.    
  }
}  
    
function community_group_form_node_insert($node) {
   // If flags are set in the feed, update them.
  if (!empty($node->feeds_item)) {

    $feed_node = node_load($node->feeds_item->feed_nid);
    $node->uid = $feed_node->uid;
        
    // Field mapping for/from Feeds import.
    $flag_import_fields = array(
      'field_import_flag_watch',
      'field_import_flag_inactive',
      'field_import_flag_duplicate',
      'field_import_flag_inappropriate',
      'field_import_flag_recommended'
      ); 
 
    // Names of flags in the system.
    $flags = array(
      'inactive',
      'watch',
      'inappropriate',
      'duplicate',
      'recommend'
      );
      
    foreach($flag_import_fields as $key => $field) {
      $value = '';
      $value = $node->{$field}['und'][0]['value'];
      // Flag all feed nodes if a value is set.
      
      // @TODO We'll want to add $node->uid to the end of the flag statement, but it was causing an error.
      // Example:  $result = flag('flag', $flag, $node->nid, $node->uid); 
      
      
      // @TODO: add a setting for the user, to automatically watch everything 
       
      // Automatically watch all imported content.
/*
      if ($field == 'field_import_flag_watch') {
        $result = flag('flag', 'watch', $node->nid); 
        if (!$result) {
           drupal_set_message(t('Content not flagged, bm'));
        }    
        else {
           drupal_set_message(t('Content is flagged, bm'));          
        }     
      }
      else{  
*/
        // they contribute & automatically recomment every node they make.
        if(($value != 0) && !empty($value)) {
          foreach($flags as $key => $flag) {
            $result = flag('flag', $flag, $node->nid);
            if (!$result) {
/*               drupal_set_message(t('Content not flagged, ' . $flag)); */
            }    
            else {
/*               drupal_set_message(t('Content is flagged, ' . $flag));           */
            }
          }
        }
        // Unflag all feed nodes if value is not set.
        else {
          foreach($flags as $key => $flag) {
            $result = flag('unflag', $flag, $node->nid);
            if (!$result) {
/*               drupal_set_message(t('Content not unflagged, ' . $flag)); */
            } 
            else {
/*               drupal_set_message(t('Content is unflagged, ' . $flag));           */
            }
          }
        }
     /*  } */

/*
        // @TODO: Unset the import fields?
        foreach($flag_import_fields as $key => $field) {
          if(!empty($value)) {
            $node->{$field}['und'][0]['value'] = null;
            dpm($node->{$field}['und'][0]['value']);
          }
        }
*/
    }
  }
}

function community_group_form_geocode($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.

  $geocode_results = geocode_google($form_state['values']['location_geocode_item'], 'json');
  $result = $geocode_results->result->results[0];
   
  $address_components = $result->address_components;
  $formatted_address = $result->formatted_address;
  $geometry = $result->geometry;
  
  $formatted = array();

  foreach ($address_components as $key => $value) {
    switch($value->types[0]) {
      case 'locality':
        $formatted['city'] = $value->long_name;
        break;
      case 'administrative_area_level_2':
        $formatted['county'] = $value->long_name;
        break;
      case 'administrative_area_level_1':
        $formatted['state'] = $value->short_name;
        break;
      case 'postal_code':
        $formatted['zipcode'] = $value->long_name;   
        break;
    }
  }
  $formatted['latitude'] = $geometry->location->lat;
  $formatted['longitude'] = $geometry->location->lng;

  $form['location_geocode_response'] =  "test: a response";
  return $form['location_geocode_response'];
}
