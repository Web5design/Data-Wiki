<?php

/**
 * Implementatation of hook_menu().
 */
function community_group_form_menu() {
  $items['add/community-group'] = array(
    'title' => 'Add Community Group',
    'description' => 'Add a community group.',
    'page callback' => 'community_group_form_form_render',
    'page arguments' => array(t('Add Community Group')),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  $items['add/community-group/geocode'] = array(
    'title' => 'Add Community Group',
    'description' => 'Add a community group.',
    'page callback' => 'community_group_form_geocode',
    'page arguments' => array(t('Add Community Group')),
    'access callback' => TRUE,
    'expanded' => TRUE,
  );
  return $items;
}

/**
 * Alter the community group form (a content type.)
 */
function community_group_form_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'community_group_node_form' && empty($_GET['section'])) {
    $form['#prefix'] .= '<div class="instructions grid_10 alpha omega">';
    $form['#prefix'] .= '<h2>' .t("Add a Community Group") . '</h2>';
    $form['#prefix'] .= '<h3>' .t("You can submit community groups here.") . '</h3>';
    $form['#prefix'] .= '<p>' .t("UPDATE: We've just upgraded and are demonstrating some new features this week. 8/28/2011.") . '</p>';
    $form['#prefix'] .= '</div><div class="clear"></div>';
    // Hide content type settings except for admins.
    // defaultcontent and revisions are showing and they are distracting.
    // @TODO fix those modules to have better permission control.
    $access = user_access('administer nodes');
    if(!$access) {
      $form['additional_settings']['#access'] = FALSE;
    }
    
    $form['title']['#suffix'] = '<div class="description">' . t('What is the official name of this community group?') . '</div>';
    
    // Hide some fields.

    $form['field_location']['#prefix'] = '<div id="field-location-add-more-wrapper">';
    $form['field_location']['#prefix'] .= '<div class="map-instructions-container">';
    $form['field_location']['#prefix'] .= '<div class="instructions-1">';
    $form['field_location']['#prefix'] .= t('Enter address or intersection to map the group.');
    $form['field_location']['#prefix'] .= '</div>';
    $form['field_location']['#prefix'] .= '<div class="instructions-2">';
    $form['field_location']['#prefix'] .= t('Draw the shape of the extent of this group.');
    $form['field_location']['#prefix'] .= '</div>';
    $form['field_location']['#prefix'] .= '<div class="address-ajax">';
    $form['field_location']['#prefix'] .= '<div id="search-links">';
    $form['field_location']['#prefix'] .= '<div id="search-map" class="form-input">';
    $form['field_location']['#prefix'] .= '<input placeholder="Enter address or zipcode." size=50 class="form-item" id="search-map-input" />';
    $form['field_location']['#prefix'] .= '<input type="image" src="' . base_path() . path_to_theme() . '/images/search_button.png" id="search-links-submit" class="search_btn" value="Search" alt="Search">';
    $form['field_location']['#prefix'] .= '</div>';
    $form['field_location']['#prefix'] .= '</div><div class="clear"></div>';   
    $form['field_location']['#prefix'] .= '</div>';

    // Add Google API (uses openlayers API key)
    // @TODO require openlayers.
    drupal_add_js(
        'http://maps.google.com/maps/api/js?sensor=false&key=' . 
        variable_get('openlayers_layers_google_api', 
          variable_get('googlemap_api_key', '')
        ), 'external');

    drupal_add_js(drupal_get_path('module', 'community_group_form') . '/js/community_group_form.js', array('type' => 'file',  'group' => JS_THEME, 'scope' =>'footer'));

  }
}

/**
 * On node presave, set the author of the feed item.
 */
function community_group_form_node_presave(&$node) {

    // If reimporting nodes, look for UUID
    if($node->feeds_item->id == 'community_group_feed_csv_reimport') {
/*
      dpm("reimport");
      dpm($node->field_import_uuid['und'][0]['value']);
      dpm($node);
      if($node->field_import_uuid['und'][0]['value'] != $node->uuid) {
        dpm("break");
        return;
      }
*/

//      $node->uuid;
    }


  if (!empty($node->feeds_item)) {
    $feed_node = node_load($node->feeds_item->feed_nid);
    $node->uid = $feed_node->uid;    
    // If citygroups_nid is set and if the guid matches the node UUID, allow the node to be saved.
    // Otherwise, do not save the node.    
  }
}  
    
function community_group_form_node_insert($node) {
   // If flags are set in the feed, update them.
  if (!empty($node->feeds_item)) {

    $feed_node = node_load($node->feeds_item->feed_nid);
    $node->uid = $feed_node->uid;
        
    // Field mapping for/from Feeds import.
    $flag_import_fields = array(
      'field_import_flag_watch',
      'field_import_flag_inactive',
      'field_import_flag_duplicate',
      'field_import_flag_inappropriate',
      'field_import_flag_recommended'
      ); 
 
    // Names of flags in the system.
    $flags = array(
      'inactive',
      'watch',
      'inappropriate',
      'duplicate',
      'recommend'
      );
      
    foreach($flag_import_fields as $key => $field) {
      $value = '';
      $value = $node->{$field}['und'][0]['value'];
      // Flag all feed nodes if a value is set.
      
      // @TODO We'll want to add $node->uid to the end of the flag statement, but it was causing an error.
      // Example:  $result = flag('flag', $flag, $node->nid, $node->uid); 
      
      
      // @TODO: add a setting for the user, to automatically watch everything 
       
      // Automatically watch all imported content.
/*
      if ($field == 'field_import_flag_watch') {
        $result = flag('flag', 'watch', $node->nid); 
        if (!$result) {
           drupal_set_message(t('Content not flagged, bm'));
        }    
        else {
           drupal_set_message(t('Content is flagged, bm'));          
        }     
      }
      else{  
*/
        // they contribute & automatically recomment every node they make.
        if(($value != 0) && !empty($value)) {
          foreach($flags as $key => $flag) {
            $result = flag('flag', $flag, $node->nid);
            if (!$result) {
/*               drupal_set_message(t('Content not flagged, ' . $flag)); */
            }    
            else {
/*               drupal_set_message(t('Content is flagged, ' . $flag));           */
            }
          }
        }
        // Unflag all feed nodes if value is not set.
        else {
          foreach($flags as $key => $flag) {
            $result = flag('unflag', $flag, $node->nid);
            if (!$result) {
/*               drupal_set_message(t('Content not unflagged, ' . $flag)); */
            } 
            else {
/*               drupal_set_message(t('Content is unflagged, ' . $flag));           */
            }
          }
        }
     /*  } */

/*
        // @TODO: Unset the import fields?
        foreach($flag_import_fields as $key => $field) {
          if(!empty($value)) {
            $node->{$field}['und'][0]['value'] = null;
            dpm($node->{$field}['und'][0]['value']);
          }
        }
*/
    }
  }
}

function community_group_form_geocode($form, $form_state) {
  // The form has already been submitted and updated. We can return the replaced
  // item as it is.

  $geocode_results = geocode_google($form_state['values']['location_geocode_item'], 'json');
  $result = $geocode_results->result->results[0];
   
  $address_components = $result->address_components;
  $formatted_address = $result->formatted_address;
  $geometry = $result->geometry;
  
  $formatted = array();

  foreach ($address_components as $key => $value) {
    switch($value->types[0]) {
      case 'locality':
        $formatted['city'] = $value->long_name;
        break;
      case 'administrative_area_level_2':
        $formatted['county'] = $value->long_name;
        break;
      case 'administrative_area_level_1':
        $formatted['state'] = $value->short_name;
        break;
      case 'postal_code':
        $formatted['zipcode'] = $value->long_name;   
        break;
    }
  }
  $formatted['latitude'] = $geometry->location->lat;
  $formatted['longitude'] = $geometry->location->lng;

  $form['location_geocode_response'] =  "test: a response";
  return $form['location_geocode_response'];
}
