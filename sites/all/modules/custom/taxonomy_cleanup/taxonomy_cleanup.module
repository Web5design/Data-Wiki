<?php

/**
 * Cleanup Taxonomy Terms
 */
 
function taxonomy_cleanup_menu() {  
  $items['admin/config/taxonomy_cleanup'] = array(
    'title' => 'Taxonomy Cleanup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_cleanup_edit_form'),
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_LOCAL_ACTION,
  );
  
  $items['admin/config/taxonomy_cleanup/remove_empty_terms'] = array(
    'title' => 'Remove Empty Terms',
    'page callback' => 'taxonomy_cleanup_remove_empty_terms',
    'page arguments' => array(t('Remove Empty Terms')),
    'access callback' => TRUE,
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_NORMAL_ITEM,
    'weight' =>  -10,
  );
 
  $items['admin/config/taxonomy_cleanup/merge_similar_terms'] = array(
    'title' => 'Merge Similar Terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_cleanup_merge_similar_terms_settings_form'),
    'access callback' => TRUE,
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_NORMAL_ITEM,
    'weight' =>  -10,
  ); 

  $items['admin/config/taxonomy_cleanup/capitalize'] = array(
    'title' => 'Capitalize Terms',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('taxonomy_cleanup_capitalize_settings_form'),
    'access callback' => TRUE,
    'access arguments' => array('administer taxonomy'),
    'type' => MENU_NORMAL_ITEM,
    'weight' =>  -10,
  ); 

  return $items;
}

function taxonomy_cleanup_edit_form($form, &$form_state, array $rule = array()) {

  $form['taxonomy_cleanup'] = array(
    '#markup' => '
    <p>You can clean up the Categories Taxonomy in two ways.</p>
    <ul>
      <li><a href="/admin/config/taxonomy_cleanup/remove_empty_terms">Remove Empty Terms</a></li>
      <li><a href="/admin/config/taxonomy_cleanup/merge_similar_terms">Merge Similar Terms</a></li>
      <li><a href="/admin/config/taxonomy_cleanup/capitalize">Capitalize Terms</a></li>
    </ul>
    ',
  );

  return system_settings_form($form);
}

function taxonomy_cleanup_remove_empty_terms() {
  // @TODO This is hard coded for CityGroups - can change this.
  $categories_vid = 4;
  $terms = taxonomy_cleanup_get_term_from_vid(4);
  
  foreach ($terms as $tid => $term) {
    $nodes = taxonomy_select_nodes($tid);
    if(empty($nodes)) {
      drupal_set_message("Removing Empty Term: " . $term);   
      taxonomy_term_delete($tid);
    }
  }

  drupal_set_message("All empty terms removed");
  return "";
}

function taxonomy_cleanup_capitalize_settings_form() {



  $output = '';
  $categories_vid = 4;
  $terms = taxonomy_cleanup_get_term_from_vid(4);

  global $base_url;

  foreach ($terms as $tid => $term) {

    $link_tid = $base_url . '/taxonomy/term/' . $tid;

    if (preg_match("/^[a-z]/", $term) == TRUE) {
      
      $output .= "<p><strong>" . l($term, $link_tid) . "</strong></p>";
    }
    else {
     // $output .= "<p>" . l($term, $link_tid) . "</p>";
    }

  }

  $form = array();

  $form['taxonomy_cleanup'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Capitalize a term'), 
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
    '#suffix' => $output,
  );

  $form['taxonomy_cleanup']['capitalize_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Term to capitalize'),
    '#description' => t("Enter a unique term name"),
  );

  $form['taxonomy_cleanup']['capitalize_all_terms'] = array(
    '#type' => 'checkbox',
    '#title' => t('Capitalize All'),
    '#description' => t("Capitalize all terms. (Cannot be undone.)"),
  );
   
  $form['taxonomy_cleanup']['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Capitalize'),
  );

  return $form;
}

/**
 * Submit function for term merging.
 */
function taxonomy_cleanup_capitalize_settings_form_submit($form, $form_state) {

  if($form_state['values']['capitalize_all_terms'] == 1) {
    $output = '';
    $categories_vid = 4;
    $terms = taxonomy_cleanup_get_term_from_vid(4);
    $count = 0;
    global $base_url;

    foreach ($terms as $tid => $term) {
      $link_tid = $base_url . '/taxonomy/term/' . $tid; 
      if (preg_match("/^[a-z]/", $term) == TRUE) {      
        $term = taxonomy_term_load($tid);

        $term->name = ucfirst($term->name);  
        taxonomy_term_save($term);
        $count++;
      }
    }
    drupal_set_message($count . " terms capitalized.");
  }
  else {
    $term = taxonomy_get_term_by_name($form_state['values']['capitalize_term']);
    $term = array_values($term);
    $term[0]->name = ucfirst($term[0]->name);  
    taxonomy_term_save($term[0]);
    drupal_set_message($term[0]->name . " capitalized.");
  }
}


function taxonomy_cleanup_merge_similar_terms_settings_form() {
  $output = '';
  $categories_vid = 4;
  $terms = taxonomy_cleanup_get_term_from_vid(4);

  global $base_url;

  foreach ($terms as $tid => $term) {

  $link_tid = $base_url . '/taxonomy/term/' . $tid;
  
    foreach($terms as $tid_sub => $term_sub) {
      if ((preg_match("/\b" . $term . "\b/i", $term_sub)) && ($term !== $term_sub)) {
        $link_tid_sub = $base_url. '/taxonomy/term/' . $tid_sub;
        $output .= "<p>Similar terms: <strong>" . l($term, $link_tid) . "</strong> & <strong>" . l($term_sub, $link_tid_sub) . '</strong></p>';
        //$output .= "<p><span class='merge'>Merge</span> | " . $term_sub . " into <strong>" . $term . '</strong><br /><br /></p>';       
      } 
    }
  }
  
  $vocabulary = taxonomy_vocabulary_load(4);

  if (!module_exists('term_merge') || !user_access('merge terms')) {
    return t('Term Merge module needs to be installed & enabled.');
  }
  
  $form = array();

  $form['taxonomy_cleanup'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Terms to Merge'), 
    '#collapsible' => FALSE, 
    '#collapsed' => FALSE,
    '#suffix' => $output,
  );

  $form['taxonomy_cleanup']['dest_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Term to keep (destination)'),
    '#description' => t("Enter a unique term name"),
  );

  $form['taxonomy_cleanup']['source_term'] = array(
    '#type' => 'textfield',
    '#title' => t('Term to remove (source)'),
    '#description' => t("Enter a unique term name"),
  );
   
  $form['taxonomy_cleanup']['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Merge'),
  );

  return $form;
}

/**
 * Validate function for term merging.
 * @TODO fix this and/or use autocomplete on the taxonomy selection forms.
 */
function taxonomy_cleanup_merge_similar_terms_settings_form_validate($form, $form_state) {

}

/**
 * Submit function for term merging.
 */
function taxonomy_cleanup_merge_similar_terms_settings_form_submit($form, $form_state) {
  $selected_tids = array();

  $term_names = implode($term_names_array, ', ');
  if (module_exists('term_merge')) {
  
    $dest = array_values(taxonomy_get_term_by_name($form_state['values']['dest_term']));
    $source = array_values(taxonomy_get_term_by_name($form_state['values']['source_term']));

    // @KLUDGE, but works.
    if(($dest[0]->vid == 4) && ($source[0]->vid == 4)) {
      term_merge($source[0]->tid, $dest[0]->tid, FALSE);
      drupal_set_message(t("Term %term_names merged into %dest_term. ", array('%term_names' => $source[0]->name, '%dest_term' => $dest[0]->name)));
    }
  }
  else {
    drupal_set_message(t('Term merge module not found'));
  }
}

function taxonomy_cleanup_get_term_from_vid($vid) {
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
  $query->fields('t', array('tid', 'name'));
  $query->condition('t.vid', $vid, '=');
  $query->condition('h.parent', 0, '='); // remove this line to get all terms.
  $result = $query->execute();

  while ($record = $result->fetchAssoc()) {
      $data[$record['tid']] = t($record['name']);
  }

  return $data;
}
